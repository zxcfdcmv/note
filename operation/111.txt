脚本:
import argparse
import os
import sys
import subprocess
import shutil
from javaproperties import Properties
def merge_properties(old_path, new_path, merged_path):
    """合并两个.properties文件, 保留旧文件中的值."""
    old_props = Properties()
    with open(old_path, 'r', encoding='utf-8') as f:
        old_props.load(f)
    with open(new_path, 'r', encoding='utf-8') as f_in, \
         open(merged_path, 'w', encoding='utf-8') as f_out:
        for line in f_in:
            stripped = line.strip()
            if '=' in stripped and not stripped.startswith(('#', '!')):
                key = stripped.split('=', 1)[0].strip()
                if key in old_props:
                    f_out.write(f"{key}={old_props[key]}\n")
                    continue
            f_out.write(line)
def merge_yaml(old_file, new_file, output_file):
    """使用yq命令合并两个YAML文件."""
    yq_expression = '''
    select(fileIndex==1) as $old | 
    select(fileIndex==0) | 
    . * ($old | del(.ignorePattern, .interfacePattern, .csrf_white_list))
    '''
    cmd = ['yq', 'eval-all', yq_expression, new_file, old_file]
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, encoding='utf-8')
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result.stdout)
    except subprocess.CalledProcessError as e:
        sys.stderr.write(f"yq command failed: {e.stderr}\n")
        sys.exit(1)            
def copy_file(src_path, dst_path):
    """直接将源文件复制到目标路径"""
    try:
        shutil.copy2(src_path, dst_path)
    except IOError as e:
        sys.stderr.write(f"复制文件失败: {e}\n")
        sys.exit(1)
def process_file(old_path, new_path, output_path):
    """处理单个文件"""
    # 处理旧文件不存在的情况
    if not os.path.exists(old_path):
        if not os.path.exists(new_path):
            sys.stderr.write(f"New file not found: {new_path}\n")
            sys.exit(1)
        # 直接复制新文件到输出路径
        sys.stderr.write(f"Notice: 旧文件 {old_path} 不存在，已复制新文件到 {output_path}\n")
        copy_file(new_path, output_path)
        return
    
    # 检查新文件是否存在（当旧文件存在时）
    if not os.path.exists(new_path):
        sys.stderr.write(f"New file not found: {new_path}\n")
        sys.exit(1)
    
    # 获取文件扩展名
    old_ext = os.path.splitext(old_path)[1].lower()
    
    # 根据文件类型选择处理方式
    if old_ext in ('.xml', '.txt'):
        # 对于XML和TXT文件，直接复制新文件（或者可以添加XML特定的合并逻辑）
        copy_file(new_path, output_path)
    elif old_ext == '.yaml' or old_ext == '.yml':
        merge_yaml(old_path, new_path, output_path)
    elif old_ext == '.properties':
        merge_properties(old_path, new_path, output_path)
    else:
        # 对于不支持的文件类型，直接复制旧文件
        sys.stderr.write(f"Notice: 不支持的文件类型 {old_ext}，已复制旧文件到 {output_path}\n")
        copy_file(old_path, output_path)
def process_directory(old_dir, new_dir, output_dir):
    """处理目录中的所有文件（忽略子目录）"""
    # 确保输出目录存在
    os.makedirs(output_dir, exist_ok=True)
    
    # 获取旧目录中的所有文件（不递归遍历子目录）
    old_files = set()
    for file in os.listdir(old_dir):
        file_path = os.path.join(old_dir, file)
        if os.path.isfile(file_path):
            old_files.add(file)
    
    # 获取新目录中的所有文件（不递归遍历子目录）
    new_files = set()
    for file in os.listdir(new_dir):
        file_path = os.path.join(new_dir, file)
        if os.path.isfile(file_path):
            new_files.add(file)
    
    # 处理所有文件
    all_files = old_files.union(new_files)
    for file in all_files:
        old_path = os.path.join(old_dir, file) if file in old_files else None
        new_path = os.path.join(new_dir, file) if file in new_files else None
        output_path = os.path.join(output_dir, file)
        
        if old_path and new_path:
            process_file(old_path, new_path, output_path)
        elif new_path:
            copy_file(new_path, output_path)
        elif old_path:
            copy_file(old_path, output_path)
def main():
    parser = argparse.ArgumentParser(description='合并配置文件.')
    parser.add_argument('--old', required=True, help='旧配置文件或目录的路径')
    parser.add_argument('--new', required=True, help='新配置文件或目录的路径')
    parser.add_argument('--output', required=True, help='配置文件合并后存放的路径')
    
    args = parser.parse_args()
    
    # 检查参数是否为目录
    old_is_dir = os.path.isdir(args.old)
    new_is_dir = os.path.isdir(args.new)
    
    if old_is_dir or new_is_dir:
        # 如果有一个参数是目录，另一个也必须是目录
        if not (old_is_dir and new_is_dir):
            sys.stderr.write("Error: 如果 --old 或 --new 是目录，另一个也必须是目录\n")
            sys.exit(1)
        
        # 处理目录
        process_directory(args.old, args.new, args.output)
    else:
        # 处理单个文件
        process_file(args.old, args.new, args.output)
if __name__ == '__main__':
    main()

命令:

python3 test.py  --old old/7.212.110.67/httpif/application.yml --new /app/jenkins/home/jobs/CMCCLOGQUERY/workspace/master/ssfportal/ssfportal-cmcclogquery-starter/httpifStarter/src/main/resources/application.yml  --output output/7.212.110.67/httpif/application.yml

旧文件:
server:
  address: 7.212.110.67 #本机ip
  port: 37521
  server-header:
    key-store: "classpath:7.225.66.188.jks" # HTTPS服务的SSL证书路径，配置相对路径时，前面加classpath:
    key-store-password: 'ENC(036d77b4ca9d773e33fdf1c1a252ef2268dab40cdc62df8c20720974246bb629c515848e69fa49442dc9dd)' #ssl密码
    key-store-provider: SUN # .p12证书填SunJSSE .jks证书库填SUN
    key-store-type: JKS # .p12证书填PKCS12 .jks证书库填JKS
    protocols: TLS # 填TSL
    #    trust-store: "classpath:servertrust.jks"                                     #持有SSL证书的信任存储
    trust-store: "classpath:trust_store" #持有SSL证书的信任存储
    trust-store-password: 'ENC(598c4d6e94d78fed3893f3d08220d80e7aba5ad8e6b87917163eb66e66c7eb079b4b49c346a4a5b980f18d)' #>用于访问信任库的密码
    #trust-store-password: 'ENC(057271995c397f4b5f3f4c3e3ab540fea997dbe0c6f322cebe3812127e79e7e09ccea3d43b61)'                 # 用于访问信任库的密码
    trust-store-provider: SUN # 信任库的提供者
    trust-store-type: JKS # 信任证书库文件的类型   JKS 或者PKCS12
    client-auth: none # 是否进行客户端认证 none表示不验证客户端；want表示会验证但不强制验证，即校验失败也可以建立连接；need为双向认证
    protocol: TLS
  servlet:
    context-path: /iptrace
    application-display-name: iptrace
    session:
      cookie:
        domain: ip #会话cookie的域名，如果使用代理请填写代理服务器IP
        http-only: true #是否对会话cookie使用“HttpOnly”cookie。
        path: /iptrace #会话cookie的路径。
        secure: true #是否始终将会话cookie标记为安全。
        SameSite: strict #完全禁止第三方cookie
      persistent: false #是否在重新启动之间保留会话数据。
      store-dir: #用于存储会话数据的目录。
      timeout: 600 #会话超时。如果未指定持续时间后缀，则将使用秒。
      tracking-modes: COOKIE #会话跟踪模式。
    encoding:
      charset: UTF-8 #默认编码格式

新文件:
server:
  address: ip          #本机ip
  port: port
  server-header:
  servlet:
    context-path: /iptrace
    application-display-name: iptrace
    session:
      cookie:
        domain: ip       #会话cookie的域名，如果使用代理请填写代理服务器IP
        http-only: true         #是否对会话cookie使用“HttpOnly”cookie。
        path: /iptrace                 #会话cookie的路径。
        secure: true            #是否始终将会话cookie标记为安全。
        SameSite: strict        #完全禁止第三方cookie
      persistent: false         #是否在重新启动之间保留会话数据。
      store-dir:                #用于存储会话数据的目录。
      timeout: 600          #会话超时。如果未指定持续时间后缀，则将使用秒。
      tracking-modes: COOKIE          #会话跟踪模式。
    encoding:
      charset: UTF-8   #默认编码格式
    tomcat:
      max-http-post-size: 104857600   #上传文件最大值
  ssl:
    ciphers: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
    enabled: true                                         # 是否启用SSL即HTTPS服务
    enabled-protocols: TLSv1.2,TLSv1.3                    # HTTPS服务支持的协议版本
    key-alias: 1                                          # HTTPS服务的SSL证书在证书库文件中的别名
    key-store: "classpath:ssf.jks"              # HTTPS服务的SSL证书路径，配置相对路径时，前面加classpath:
    key-store-password: ''                   # HTTPS服务的SSL证书文件的密码，如果配置的密文，格式为'ENC(密文)'，或者配置为
'TOENC(明文)' 系统在启动时会自动加密并修改为加密的格式ENC(密文)
    key-store-provider: SUN                           # .p12证书填SunJSSE .jks证书库填SUN
    key-store-type: JKS                                # .p12证书填PKCS12 .jks证书库填JKS
    protocols: TLS                                        # 填TSL
    trust-store: "classpath:servertrust.jks"                                     #持有SSL证书的信任存储
    trust-store-password: ''                              #用于访问信任库的密码
    trust-store-provider: SUN                             # 信任库的提供者
    trust-store-type: JKS                                 # 信任证书库文件的类型   JKS 或者PKCS12

合并输出文件:
server:
  address: 7.212.110.67 #本机ip
  port: 37521
  server-header:
    key-store: "classpath:7.225.66.188.jks" # HTTPS服务的SSL证书路径，配置相对路径时，前面加classpath:
    key-store-password: 'ENC(036d77b4ca9d773e33fdf1c1a252ef2268dab40cdc62df8c20720974246bb629c515848e69fa49442dc9dd)' #ssl密码
    key-store-provider: SUN # .p12证书填SunJSSE .jks证书库填SUN
    key-store-type: JKS # .p12证书填PKCS12 .jks证书库填JKS
    protocols: TLS # 填TSL
    #    trust-store: "classpath:servertrust.jks"                                     #持有SSL证书的信任存储
    trust-store: "classpath:trust_store" #持有SSL证书的信任存储
    trust-store-password: 'ENC(598c4d6e94d78fed3893f3d08220d80e7aba5ad8e6b87917163eb66e66c7eb079b4b49c346a4a5b980f18d)' #>用于访问信任库的密码
    #trust-store-password: 'ENC(057271995c397f4b5f3f4c3e3ab540fea997dbe0c6f322cebe3812127e79e7e09ccea3d43b61)'                 # 用于访问信任库的密码
    trust-store-provider: SUN # 信任库的提供者
    trust-store-type: JKS # 信任证书库文件的类型   JKS 或者PKCS12
    client-auth: none # 是否进行客户端认证 none表示不验证客户端；want表示会验证但不强制验证，即校验失败也可以建立连接；need为双向认证
    protocol: TLS
  servlet:
    context-path: /iptrace
    application-display-name: iptrace
    session:
      cookie:
        domain: ip #会话cookie的域名，如果使用代理请填写代理服务器IP
        http-only: true #是否对会话cookie使用“HttpOnly”cookie。
        path: /iptrace #会话cookie的路径。
        secure: true #是否始终将会话cookie标记为安全。
        SameSite: strict #完全禁止第三方cookie
      persistent: false #是否在重新启动之间保留会话数据。
      store-dir: #用于存储会话数据的目录。
      timeout: 600 #会话超时。如果未指定持续时间后缀，则将使用秒。
      tracking-modes: COOKIE #会话跟踪模式。
    encoding:
      charset: UTF-8 #默认编码格式
